@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Training</PageTitle>

<h1>Training</h1>


@if (Exercises is not null)
{
    <div class="form">
        <label>
            Exercise
            <select @bind="ExerciseId">
                @foreach (var exercise in Exercises)
                {
                    <option value="@exercise.Id">@exercise.Name - @exercise.CategoryName</option>
                }
            </select>
        </label>
        <label>
            Weight
            <input @bind="Weight" class="form-control">
        </label>
        <label>
            Sets
            <input @bind="Sets" class="form-control">
        </label>
        <label>
            Reps
            <input @bind="Reps" class="form-control">
        </label>

        <button @onclick="SubmitForm" class="btn">Add exercise</button>
    </div>
}

@if (ExerciseTrainings == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Weight</th>
            <th>Sets</th>
            <th>Reps</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var exercise in ExerciseTrainings)
        {
            <tr>
                <td>@exercise.ExerciseName</td>
                <td>@exercise.Weight</td>
                <td>@exercise.Sets</td>
                <td>@exercise.Reps</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    
    private int ExerciseId { get; set; }
    
    private string Weight { get; set; }
    
    private string Sets { get; set; }
    
    private string Reps { get; set; }
    
    private int TrainingId { get; set; }
    
    private List<Exercise>? Exercises { get; set; }

    private List<ExerciseTraining>? ExerciseTrainings { get; set; } = new();

    private class ExerciseTraining
    {
        public string ExerciseName { get; set; }
        
        public int ExerciseId { get; set; }
        
        public float Weight { get; set; }
        
        public int Sets { get; set; }
        
        public int Reps { get; set; }
    }

    private class Exercise
    {
        public int Id { get; set; }
        
        public string Name { get; set; }
        
        public string CategoryName { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        Exercises = await Http.GetFromJsonAsync<List<Exercise>>("Exercise/Get");
        TrainingId = await Http.GetFromJsonAsync<int>("Training/GetLastTrainingId");
        ExerciseTrainings = await Http.GetFromJsonAsync<List<ExerciseTraining>>("Training/GetExerciseTrainings");
    }

    private async Task SubmitForm()
    {
        Console.WriteLine(ExerciseId);
        var exerciseTraining = new ExerciseTraining
        {
            ExerciseName = Exercises!.FirstOrDefault(x => x.Id == ExerciseId)!.Name,
            ExerciseId = ExerciseId,
            Reps = int.Parse(Reps),
            Weight = float.Parse(Weight),
            Sets = int.Parse(Sets)
        };

        await Http.PostAsJsonAsync($"Training/{TrainingId}/AddExercise", exerciseTraining);
        
        ExerciseTrainings!.Add(exerciseTraining);
    }


}